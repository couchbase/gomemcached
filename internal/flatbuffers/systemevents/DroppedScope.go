// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package systemevents

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DroppedScope struct {
	_tab flatbuffers.Table
}

func GetRootAsDroppedScope(buf []byte, offset flatbuffers.UOffsetT) *DroppedScope {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DroppedScope{}
	x.Init(buf, n+offset)
	return x
}

func FinishDroppedScopeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDroppedScope(buf []byte, offset flatbuffers.UOffsetT) *DroppedScope {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DroppedScope{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDroppedScopeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DroppedScope) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DroppedScope) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DroppedScope) Uid() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DroppedScope) MutateUid(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *DroppedScope) ScopeId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DroppedScope) MutateScopeId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *DroppedScope) SystemScope() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *DroppedScope) MutateSystemScope(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func DroppedScopeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DroppedScopeAddUid(builder *flatbuffers.Builder, uid uint64) {
	builder.PrependUint64Slot(0, uid, 0)
}
func DroppedScopeAddScopeId(builder *flatbuffers.Builder, scopeId uint32) {
	builder.PrependUint32Slot(1, scopeId, 0)
}
func DroppedScopeAddSystemScope(builder *flatbuffers.Builder, systemScope bool) {
	builder.PrependBoolSlot(2, systemScope, false)
}
func DroppedScopeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
