// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	io "io"

	gomemcached "github.com/couchbase/gomemcached"

	mock "github.com/stretchr/testify/mock"
)

// RequestHandler is an autogenerated mock type for the RequestHandler type
type RequestHandler struct {
	mock.Mock
}

type RequestHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestHandler) EXPECT() *RequestHandler_Expecter {
	return &RequestHandler_Expecter{mock: &_m.Mock}
}

// HandleMessage provides a mock function with given fields: _a0, _a1
func (_m *RequestHandler) HandleMessage(_a0 io.Writer, _a1 *gomemcached.MCRequest) *gomemcached.MCResponse {
	ret := _m.Called(_a0, _a1)

	var r0 *gomemcached.MCResponse
	if rf, ok := ret.Get(0).(func(io.Writer, *gomemcached.MCRequest) *gomemcached.MCResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gomemcached.MCResponse)
		}
	}

	return r0
}

// RequestHandler_HandleMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleMessage'
type RequestHandler_HandleMessage_Call struct {
	*mock.Call
}

// HandleMessage is a helper method to define mock.On call
//   - _a0 io.Writer
//   - _a1 *gomemcached.MCRequest
func (_e *RequestHandler_Expecter) HandleMessage(_a0 interface{}, _a1 interface{}) *RequestHandler_HandleMessage_Call {
	return &RequestHandler_HandleMessage_Call{Call: _e.mock.On("HandleMessage", _a0, _a1)}
}

func (_c *RequestHandler_HandleMessage_Call) Run(run func(_a0 io.Writer, _a1 *gomemcached.MCRequest)) *RequestHandler_HandleMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer), args[1].(*gomemcached.MCRequest))
	})
	return _c
}

func (_c *RequestHandler_HandleMessage_Call) Return(_a0 *gomemcached.MCResponse) *RequestHandler_HandleMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestHandler_HandleMessage_Call) RunAndReturn(run func(io.Writer, *gomemcached.MCRequest) *gomemcached.MCResponse) *RequestHandler_HandleMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequestHandler creates a new instance of RequestHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestHandler {
	mock := &RequestHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
