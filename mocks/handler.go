// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	gomemcached "github.com/couchbase/gomemcached"
	mock "github.com/stretchr/testify/mock"
)

// handler is an autogenerated mock type for the handler type
type handler struct {
	mock.Mock
}

// Execute provides a mock function with given fields: req, s
func (_m *handler) Execute(req *gomemcached.MCRequest, s *storage) *gomemcached.MCResponse {
	ret := _m.Called(req, s)

	var r0 *gomemcached.MCResponse
	if rf, ok := ret.Get(0).(func(*gomemcached.MCRequest, *storage) *gomemcached.MCResponse); ok {
		r0 = rf(req, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gomemcached.MCResponse)
		}
	}

	return r0
}

type mockConstructorTestingTnewHandler interface {
	mock.TestingT
	Cleanup(func())
}

// newHandler creates a new instance of handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newHandler(t mockConstructorTestingTnewHandler) *handler {
	mock := &handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
