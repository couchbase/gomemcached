// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CollectionDropEvent is an autogenerated mock type for the CollectionDropEvent type
type CollectionDropEvent struct {
	mock.Mock
}

// GetCollectionId provides a mock function with given fields:
func (_m *CollectionDropEvent) GetCollectionId() (uint32, error) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManifestId provides a mock function with given fields:
func (_m *CollectionDropEvent) GetManifestId() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScopeId provides a mock function with given fields:
func (_m *CollectionDropEvent) GetScopeId() (uint32, error) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCollectionDropEvent interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollectionDropEvent creates a new instance of CollectionDropEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollectionDropEvent(t mockConstructorTestingTNewCollectionDropEvent) *CollectionDropEvent {
	mock := &CollectionDropEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
