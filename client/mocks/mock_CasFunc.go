// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	memcached "github.com/couchbase/gomemcached/client"
	mock "github.com/stretchr/testify/mock"
)

// CasFunc is an autogenerated mock type for the CasFunc type
type CasFunc struct {
	mock.Mock
}

type CasFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *CasFunc) EXPECT() *CasFunc_Expecter {
	return &CasFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: current
func (_m *CasFunc) Execute(current []byte) ([]byte, memcached.CasOp) {
	ret := _m.Called(current)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []byte
	var r1 memcached.CasOp
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, memcached.CasOp)); ok {
		return rf(current)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(current)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) memcached.CasOp); ok {
		r1 = rf(current)
	} else {
		r1 = ret.Get(1).(memcached.CasOp)
	}

	return r0, r1
}

// CasFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type CasFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - current []byte
func (_e *CasFunc_Expecter) Execute(current interface{}) *CasFunc_Execute_Call {
	return &CasFunc_Execute_Call{Call: _e.mock.On("Execute", current)}
}

func (_c *CasFunc_Execute_Call) Run(run func(current []byte)) *CasFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *CasFunc_Execute_Call) Return(_a0 []byte, _a1 memcached.CasOp) *CasFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CasFunc_Execute_Call) RunAndReturn(run func([]byte) ([]byte, memcached.CasOp)) *CasFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewCasFunc creates a new instance of CasFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCasFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *CasFunc {
	mock := &CasFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
