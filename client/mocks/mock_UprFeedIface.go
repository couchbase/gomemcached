// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	memcached "github.com/couchbase/gomemcached/client"
	mock "github.com/stretchr/testify/mock"
)

// UprFeedIface is an autogenerated mock type for the UprFeedIface type
type UprFeedIface struct {
	mock.Mock
}

type UprFeedIface_Expecter struct {
	mock *mock.Mock
}

func (_m *UprFeedIface) EXPECT() *UprFeedIface_Expecter {
	return &UprFeedIface_Expecter{mock: &_m.Mock}
}

// ClientAck provides a mock function with given fields: event
func (_m *UprFeedIface) ClientAck(event *memcached.UprEvent) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for ClientAck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*memcached.UprEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UprFeedIface_ClientAck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientAck'
type UprFeedIface_ClientAck_Call struct {
	*mock.Call
}

// ClientAck is a helper method to define mock.On call
//   - event *memcached.UprEvent
func (_e *UprFeedIface_Expecter) ClientAck(event interface{}) *UprFeedIface_ClientAck_Call {
	return &UprFeedIface_ClientAck_Call{Call: _e.mock.On("ClientAck", event)}
}

func (_c *UprFeedIface_ClientAck_Call) Run(run func(event *memcached.UprEvent)) *UprFeedIface_ClientAck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*memcached.UprEvent))
	})
	return _c
}

func (_c *UprFeedIface_ClientAck_Call) Return(_a0 error) *UprFeedIface_ClientAck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UprFeedIface_ClientAck_Call) RunAndReturn(run func(*memcached.UprEvent) error) *UprFeedIface_ClientAck_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *UprFeedIface) Close() {
	_m.Called()
}

// UprFeedIface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type UprFeedIface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *UprFeedIface_Expecter) Close() *UprFeedIface_Close_Call {
	return &UprFeedIface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *UprFeedIface_Close_Call) Run(run func()) *UprFeedIface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UprFeedIface_Close_Call) Return() *UprFeedIface_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *UprFeedIface_Close_Call) RunAndReturn(run func()) *UprFeedIface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CloseStream provides a mock function with given fields: vbno, opaqueMSB
func (_m *UprFeedIface) CloseStream(vbno uint16, opaqueMSB uint16) error {
	ret := _m.Called(vbno, opaqueMSB)

	if len(ret) == 0 {
		panic("no return value specified for CloseStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint16, uint16) error); ok {
		r0 = rf(vbno, opaqueMSB)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UprFeedIface_CloseStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseStream'
type UprFeedIface_CloseStream_Call struct {
	*mock.Call
}

// CloseStream is a helper method to define mock.On call
//   - vbno uint16
//   - opaqueMSB uint16
func (_e *UprFeedIface_Expecter) CloseStream(vbno interface{}, opaqueMSB interface{}) *UprFeedIface_CloseStream_Call {
	return &UprFeedIface_CloseStream_Call{Call: _e.mock.On("CloseStream", vbno, opaqueMSB)}
}

func (_c *UprFeedIface_CloseStream_Call) Run(run func(vbno uint16, opaqueMSB uint16)) *UprFeedIface_CloseStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint16), args[1].(uint16))
	})
	return _c
}

func (_c *UprFeedIface_CloseStream_Call) Return(_a0 error) *UprFeedIface_CloseStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UprFeedIface_CloseStream_Call) RunAndReturn(run func(uint16, uint16) error) *UprFeedIface_CloseStream_Call {
	_c.Call.Return(run)
	return _c
}

// Closed provides a mock function with given fields:
func (_m *UprFeedIface) Closed() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Closed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UprFeedIface_Closed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Closed'
type UprFeedIface_Closed_Call struct {
	*mock.Call
}

// Closed is a helper method to define mock.On call
func (_e *UprFeedIface_Expecter) Closed() *UprFeedIface_Closed_Call {
	return &UprFeedIface_Closed_Call{Call: _e.mock.On("Closed")}
}

func (_c *UprFeedIface_Closed_Call) Run(run func()) *UprFeedIface_Closed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UprFeedIface_Closed_Call) Return(_a0 bool) *UprFeedIface_Closed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UprFeedIface_Closed_Call) RunAndReturn(run func() bool) *UprFeedIface_Closed_Call {
	_c.Call.Return(run)
	return _c
}

// GetError provides a mock function with given fields:
func (_m *UprFeedIface) GetError() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UprFeedIface_GetError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetError'
type UprFeedIface_GetError_Call struct {
	*mock.Call
}

// GetError is a helper method to define mock.On call
func (_e *UprFeedIface_Expecter) GetError() *UprFeedIface_GetError_Call {
	return &UprFeedIface_GetError_Call{Call: _e.mock.On("GetError")}
}

func (_c *UprFeedIface_GetError_Call) Run(run func()) *UprFeedIface_GetError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UprFeedIface_GetError_Call) Return(_a0 error) *UprFeedIface_GetError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UprFeedIface_GetError_Call) RunAndReturn(run func() error) *UprFeedIface_GetError_Call {
	_c.Call.Return(run)
	return _c
}

// GetUprEventCh provides a mock function with given fields:
func (_m *UprFeedIface) GetUprEventCh() <-chan *memcached.UprEvent {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUprEventCh")
	}

	var r0 <-chan *memcached.UprEvent
	if rf, ok := ret.Get(0).(func() <-chan *memcached.UprEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *memcached.UprEvent)
		}
	}

	return r0
}

// UprFeedIface_GetUprEventCh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUprEventCh'
type UprFeedIface_GetUprEventCh_Call struct {
	*mock.Call
}

// GetUprEventCh is a helper method to define mock.On call
func (_e *UprFeedIface_Expecter) GetUprEventCh() *UprFeedIface_GetUprEventCh_Call {
	return &UprFeedIface_GetUprEventCh_Call{Call: _e.mock.On("GetUprEventCh")}
}

func (_c *UprFeedIface_GetUprEventCh_Call) Run(run func()) *UprFeedIface_GetUprEventCh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UprFeedIface_GetUprEventCh_Call) Return(_a0 <-chan *memcached.UprEvent) *UprFeedIface_GetUprEventCh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UprFeedIface_GetUprEventCh_Call) RunAndReturn(run func() <-chan *memcached.UprEvent) *UprFeedIface_GetUprEventCh_Call {
	_c.Call.Return(run)
	return _c
}

// GetUprStats provides a mock function with given fields:
func (_m *UprFeedIface) GetUprStats() *memcached.UprStats {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUprStats")
	}

	var r0 *memcached.UprStats
	if rf, ok := ret.Get(0).(func() *memcached.UprStats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*memcached.UprStats)
		}
	}

	return r0
}

// UprFeedIface_GetUprStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUprStats'
type UprFeedIface_GetUprStats_Call struct {
	*mock.Call
}

// GetUprStats is a helper method to define mock.On call
func (_e *UprFeedIface_Expecter) GetUprStats() *UprFeedIface_GetUprStats_Call {
	return &UprFeedIface_GetUprStats_Call{Call: _e.mock.On("GetUprStats")}
}

func (_c *UprFeedIface_GetUprStats_Call) Run(run func()) *UprFeedIface_GetUprStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UprFeedIface_GetUprStats_Call) Return(_a0 *memcached.UprStats) *UprFeedIface_GetUprStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UprFeedIface_GetUprStats_Call) RunAndReturn(run func() *memcached.UprStats) *UprFeedIface_GetUprStats_Call {
	_c.Call.Return(run)
	return _c
}

// SetPriorityAsync provides a mock function with given fields: p
func (_m *UprFeedIface) SetPriorityAsync(p memcached.PriorityType) error {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for SetPriorityAsync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(memcached.PriorityType) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UprFeedIface_SetPriorityAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPriorityAsync'
type UprFeedIface_SetPriorityAsync_Call struct {
	*mock.Call
}

// SetPriorityAsync is a helper method to define mock.On call
//   - p memcached.PriorityType
func (_e *UprFeedIface_Expecter) SetPriorityAsync(p interface{}) *UprFeedIface_SetPriorityAsync_Call {
	return &UprFeedIface_SetPriorityAsync_Call{Call: _e.mock.On("SetPriorityAsync", p)}
}

func (_c *UprFeedIface_SetPriorityAsync_Call) Run(run func(p memcached.PriorityType)) *UprFeedIface_SetPriorityAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(memcached.PriorityType))
	})
	return _c
}

func (_c *UprFeedIface_SetPriorityAsync_Call) Return(_a0 error) *UprFeedIface_SetPriorityAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UprFeedIface_SetPriorityAsync_Call) RunAndReturn(run func(memcached.PriorityType) error) *UprFeedIface_SetPriorityAsync_Call {
	_c.Call.Return(run)
	return _c
}

// StartFeed provides a mock function with given fields:
func (_m *UprFeedIface) StartFeed() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartFeed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UprFeedIface_StartFeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartFeed'
type UprFeedIface_StartFeed_Call struct {
	*mock.Call
}

// StartFeed is a helper method to define mock.On call
func (_e *UprFeedIface_Expecter) StartFeed() *UprFeedIface_StartFeed_Call {
	return &UprFeedIface_StartFeed_Call{Call: _e.mock.On("StartFeed")}
}

func (_c *UprFeedIface_StartFeed_Call) Run(run func()) *UprFeedIface_StartFeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UprFeedIface_StartFeed_Call) Return(_a0 error) *UprFeedIface_StartFeed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UprFeedIface_StartFeed_Call) RunAndReturn(run func() error) *UprFeedIface_StartFeed_Call {
	_c.Call.Return(run)
	return _c
}

// StartFeedWithConfig provides a mock function with given fields: datachan_len
func (_m *UprFeedIface) StartFeedWithConfig(datachan_len int) error {
	ret := _m.Called(datachan_len)

	if len(ret) == 0 {
		panic("no return value specified for StartFeedWithConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(datachan_len)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UprFeedIface_StartFeedWithConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartFeedWithConfig'
type UprFeedIface_StartFeedWithConfig_Call struct {
	*mock.Call
}

// StartFeedWithConfig is a helper method to define mock.On call
//   - datachan_len int
func (_e *UprFeedIface_Expecter) StartFeedWithConfig(datachan_len interface{}) *UprFeedIface_StartFeedWithConfig_Call {
	return &UprFeedIface_StartFeedWithConfig_Call{Call: _e.mock.On("StartFeedWithConfig", datachan_len)}
}

func (_c *UprFeedIface_StartFeedWithConfig_Call) Run(run func(datachan_len int)) *UprFeedIface_StartFeedWithConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *UprFeedIface_StartFeedWithConfig_Call) Return(_a0 error) *UprFeedIface_StartFeedWithConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UprFeedIface_StartFeedWithConfig_Call) RunAndReturn(run func(int) error) *UprFeedIface_StartFeedWithConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UprOpen provides a mock function with given fields: name, sequence, bufSize
func (_m *UprFeedIface) UprOpen(name string, sequence uint32, bufSize uint32) error {
	ret := _m.Called(name, sequence, bufSize)

	if len(ret) == 0 {
		panic("no return value specified for UprOpen")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint32, uint32) error); ok {
		r0 = rf(name, sequence, bufSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UprFeedIface_UprOpen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UprOpen'
type UprFeedIface_UprOpen_Call struct {
	*mock.Call
}

// UprOpen is a helper method to define mock.On call
//   - name string
//   - sequence uint32
//   - bufSize uint32
func (_e *UprFeedIface_Expecter) UprOpen(name interface{}, sequence interface{}, bufSize interface{}) *UprFeedIface_UprOpen_Call {
	return &UprFeedIface_UprOpen_Call{Call: _e.mock.On("UprOpen", name, sequence, bufSize)}
}

func (_c *UprFeedIface_UprOpen_Call) Run(run func(name string, sequence uint32, bufSize uint32)) *UprFeedIface_UprOpen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint32), args[2].(uint32))
	})
	return _c
}

func (_c *UprFeedIface_UprOpen_Call) Return(_a0 error) *UprFeedIface_UprOpen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UprFeedIface_UprOpen_Call) RunAndReturn(run func(string, uint32, uint32) error) *UprFeedIface_UprOpen_Call {
	_c.Call.Return(run)
	return _c
}

// UprOpenWithFeatures provides a mock function with given fields: name, sequence, bufSize, features
func (_m *UprFeedIface) UprOpenWithFeatures(name string, sequence uint32, bufSize uint32, features memcached.UprFeatures) (error, memcached.UprFeatures) {
	ret := _m.Called(name, sequence, bufSize, features)

	if len(ret) == 0 {
		panic("no return value specified for UprOpenWithFeatures")
	}

	var r0 error
	var r1 memcached.UprFeatures
	if rf, ok := ret.Get(0).(func(string, uint32, uint32, memcached.UprFeatures) (error, memcached.UprFeatures)); ok {
		return rf(name, sequence, bufSize, features)
	}
	if rf, ok := ret.Get(0).(func(string, uint32, uint32, memcached.UprFeatures) error); ok {
		r0 = rf(name, sequence, bufSize, features)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(string, uint32, uint32, memcached.UprFeatures) memcached.UprFeatures); ok {
		r1 = rf(name, sequence, bufSize, features)
	} else {
		r1 = ret.Get(1).(memcached.UprFeatures)
	}

	return r0, r1
}

// UprFeedIface_UprOpenWithFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UprOpenWithFeatures'
type UprFeedIface_UprOpenWithFeatures_Call struct {
	*mock.Call
}

// UprOpenWithFeatures is a helper method to define mock.On call
//   - name string
//   - sequence uint32
//   - bufSize uint32
//   - features memcached.UprFeatures
func (_e *UprFeedIface_Expecter) UprOpenWithFeatures(name interface{}, sequence interface{}, bufSize interface{}, features interface{}) *UprFeedIface_UprOpenWithFeatures_Call {
	return &UprFeedIface_UprOpenWithFeatures_Call{Call: _e.mock.On("UprOpenWithFeatures", name, sequence, bufSize, features)}
}

func (_c *UprFeedIface_UprOpenWithFeatures_Call) Run(run func(name string, sequence uint32, bufSize uint32, features memcached.UprFeatures)) *UprFeedIface_UprOpenWithFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint32), args[2].(uint32), args[3].(memcached.UprFeatures))
	})
	return _c
}

func (_c *UprFeedIface_UprOpenWithFeatures_Call) Return(_a0 error, _a1 memcached.UprFeatures) *UprFeedIface_UprOpenWithFeatures_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UprFeedIface_UprOpenWithFeatures_Call) RunAndReturn(run func(string, uint32, uint32, memcached.UprFeatures) (error, memcached.UprFeatures)) *UprFeedIface_UprOpenWithFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// UprOpenWithXATTR provides a mock function with given fields: name, sequence, bufSize
func (_m *UprFeedIface) UprOpenWithXATTR(name string, sequence uint32, bufSize uint32) error {
	ret := _m.Called(name, sequence, bufSize)

	if len(ret) == 0 {
		panic("no return value specified for UprOpenWithXATTR")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint32, uint32) error); ok {
		r0 = rf(name, sequence, bufSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UprFeedIface_UprOpenWithXATTR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UprOpenWithXATTR'
type UprFeedIface_UprOpenWithXATTR_Call struct {
	*mock.Call
}

// UprOpenWithXATTR is a helper method to define mock.On call
//   - name string
//   - sequence uint32
//   - bufSize uint32
func (_e *UprFeedIface_Expecter) UprOpenWithXATTR(name interface{}, sequence interface{}, bufSize interface{}) *UprFeedIface_UprOpenWithXATTR_Call {
	return &UprFeedIface_UprOpenWithXATTR_Call{Call: _e.mock.On("UprOpenWithXATTR", name, sequence, bufSize)}
}

func (_c *UprFeedIface_UprOpenWithXATTR_Call) Run(run func(name string, sequence uint32, bufSize uint32)) *UprFeedIface_UprOpenWithXATTR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint32), args[2].(uint32))
	})
	return _c
}

func (_c *UprFeedIface_UprOpenWithXATTR_Call) Return(_a0 error) *UprFeedIface_UprOpenWithXATTR_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UprFeedIface_UprOpenWithXATTR_Call) RunAndReturn(run func(string, uint32, uint32) error) *UprFeedIface_UprOpenWithXATTR_Call {
	_c.Call.Return(run)
	return _c
}

// UprRequestCollectionsStream provides a mock function with given fields: vbno, opaqueMSB, flags, vbuuid, startSeq, endSeq, snapStart, snapEnd, filter
func (_m *UprFeedIface) UprRequestCollectionsStream(vbno uint16, opaqueMSB uint16, flags uint32, vbuuid uint64, startSeq uint64, endSeq uint64, snapStart uint64, snapEnd uint64, filter *memcached.CollectionsFilter) error {
	ret := _m.Called(vbno, opaqueMSB, flags, vbuuid, startSeq, endSeq, snapStart, snapEnd, filter)

	if len(ret) == 0 {
		panic("no return value specified for UprRequestCollectionsStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint16, uint16, uint32, uint64, uint64, uint64, uint64, uint64, *memcached.CollectionsFilter) error); ok {
		r0 = rf(vbno, opaqueMSB, flags, vbuuid, startSeq, endSeq, snapStart, snapEnd, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UprFeedIface_UprRequestCollectionsStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UprRequestCollectionsStream'
type UprFeedIface_UprRequestCollectionsStream_Call struct {
	*mock.Call
}

// UprRequestCollectionsStream is a helper method to define mock.On call
//   - vbno uint16
//   - opaqueMSB uint16
//   - flags uint32
//   - vbuuid uint64
//   - startSeq uint64
//   - endSeq uint64
//   - snapStart uint64
//   - snapEnd uint64
//   - filter *memcached.CollectionsFilter
func (_e *UprFeedIface_Expecter) UprRequestCollectionsStream(vbno interface{}, opaqueMSB interface{}, flags interface{}, vbuuid interface{}, startSeq interface{}, endSeq interface{}, snapStart interface{}, snapEnd interface{}, filter interface{}) *UprFeedIface_UprRequestCollectionsStream_Call {
	return &UprFeedIface_UprRequestCollectionsStream_Call{Call: _e.mock.On("UprRequestCollectionsStream", vbno, opaqueMSB, flags, vbuuid, startSeq, endSeq, snapStart, snapEnd, filter)}
}

func (_c *UprFeedIface_UprRequestCollectionsStream_Call) Run(run func(vbno uint16, opaqueMSB uint16, flags uint32, vbuuid uint64, startSeq uint64, endSeq uint64, snapStart uint64, snapEnd uint64, filter *memcached.CollectionsFilter)) *UprFeedIface_UprRequestCollectionsStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint16), args[1].(uint16), args[2].(uint32), args[3].(uint64), args[4].(uint64), args[5].(uint64), args[6].(uint64), args[7].(uint64), args[8].(*memcached.CollectionsFilter))
	})
	return _c
}

func (_c *UprFeedIface_UprRequestCollectionsStream_Call) Return(_a0 error) *UprFeedIface_UprRequestCollectionsStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UprFeedIface_UprRequestCollectionsStream_Call) RunAndReturn(run func(uint16, uint16, uint32, uint64, uint64, uint64, uint64, uint64, *memcached.CollectionsFilter) error) *UprFeedIface_UprRequestCollectionsStream_Call {
	_c.Call.Return(run)
	return _c
}

// UprRequestStream provides a mock function with given fields: vbno, opaqueMSB, flags, vuuid, startSequence, endSequence, snapStart, snapEnd
func (_m *UprFeedIface) UprRequestStream(vbno uint16, opaqueMSB uint16, flags uint32, vuuid uint64, startSequence uint64, endSequence uint64, snapStart uint64, snapEnd uint64) error {
	ret := _m.Called(vbno, opaqueMSB, flags, vuuid, startSequence, endSequence, snapStart, snapEnd)

	if len(ret) == 0 {
		panic("no return value specified for UprRequestStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint16, uint16, uint32, uint64, uint64, uint64, uint64, uint64) error); ok {
		r0 = rf(vbno, opaqueMSB, flags, vuuid, startSequence, endSequence, snapStart, snapEnd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UprFeedIface_UprRequestStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UprRequestStream'
type UprFeedIface_UprRequestStream_Call struct {
	*mock.Call
}

// UprRequestStream is a helper method to define mock.On call
//   - vbno uint16
//   - opaqueMSB uint16
//   - flags uint32
//   - vuuid uint64
//   - startSequence uint64
//   - endSequence uint64
//   - snapStart uint64
//   - snapEnd uint64
func (_e *UprFeedIface_Expecter) UprRequestStream(vbno interface{}, opaqueMSB interface{}, flags interface{}, vuuid interface{}, startSequence interface{}, endSequence interface{}, snapStart interface{}, snapEnd interface{}) *UprFeedIface_UprRequestStream_Call {
	return &UprFeedIface_UprRequestStream_Call{Call: _e.mock.On("UprRequestStream", vbno, opaqueMSB, flags, vuuid, startSequence, endSequence, snapStart, snapEnd)}
}

func (_c *UprFeedIface_UprRequestStream_Call) Run(run func(vbno uint16, opaqueMSB uint16, flags uint32, vuuid uint64, startSequence uint64, endSequence uint64, snapStart uint64, snapEnd uint64)) *UprFeedIface_UprRequestStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint16), args[1].(uint16), args[2].(uint32), args[3].(uint64), args[4].(uint64), args[5].(uint64), args[6].(uint64), args[7].(uint64))
	})
	return _c
}

func (_c *UprFeedIface_UprRequestStream_Call) Return(_a0 error) *UprFeedIface_UprRequestStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UprFeedIface_UprRequestStream_Call) RunAndReturn(run func(uint16, uint16, uint32, uint64, uint64, uint64, uint64, uint64) error) *UprFeedIface_UprRequestStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewUprFeedIface creates a new instance of UprFeedIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUprFeedIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UprFeedIface {
	mock := &UprFeedIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
