// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// memcachedConnection is an autogenerated mock type for the memcachedConnection type
type memcachedConnection struct {
	mock.Mock
}

type memcachedConnection_Expecter struct {
	mock *mock.Mock
}

func (_m *memcachedConnection) EXPECT() *memcachedConnection_Expecter {
	return &memcachedConnection_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *memcachedConnection) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// memcachedConnection_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type memcachedConnection_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *memcachedConnection_Expecter) Close() *memcachedConnection_Close_Call {
	return &memcachedConnection_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *memcachedConnection_Close_Call) Run(run func()) *memcachedConnection_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *memcachedConnection_Close_Call) Return(_a0 error) *memcachedConnection_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *memcachedConnection_Close_Call) RunAndReturn(run func() error) *memcachedConnection_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: p
func (_m *memcachedConnection) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// memcachedConnection_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type memcachedConnection_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - p []byte
func (_e *memcachedConnection_Expecter) Read(p interface{}) *memcachedConnection_Read_Call {
	return &memcachedConnection_Read_Call{Call: _e.mock.On("Read", p)}
}

func (_c *memcachedConnection_Read_Call) Run(run func(p []byte)) *memcachedConnection_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *memcachedConnection_Read_Call) Return(n int, err error) *memcachedConnection_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *memcachedConnection_Read_Call) RunAndReturn(run func([]byte) (int, error)) *memcachedConnection_Read_Call {
	_c.Call.Return(run)
	return _c
}

// SetDeadline provides a mock function with given fields: _a0
func (_m *memcachedConnection) SetDeadline(_a0 time.Time) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// memcachedConnection_SetDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDeadline'
type memcachedConnection_SetDeadline_Call struct {
	*mock.Call
}

// SetDeadline is a helper method to define mock.On call
//   - _a0 time.Time
func (_e *memcachedConnection_Expecter) SetDeadline(_a0 interface{}) *memcachedConnection_SetDeadline_Call {
	return &memcachedConnection_SetDeadline_Call{Call: _e.mock.On("SetDeadline", _a0)}
}

func (_c *memcachedConnection_SetDeadline_Call) Run(run func(_a0 time.Time)) *memcachedConnection_SetDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *memcachedConnection_SetDeadline_Call) Return(_a0 error) *memcachedConnection_SetDeadline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *memcachedConnection_SetDeadline_Call) RunAndReturn(run func(time.Time) error) *memcachedConnection_SetDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// SetReadDeadline provides a mock function with given fields: _a0
func (_m *memcachedConnection) SetReadDeadline(_a0 time.Time) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// memcachedConnection_SetReadDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReadDeadline'
type memcachedConnection_SetReadDeadline_Call struct {
	*mock.Call
}

// SetReadDeadline is a helper method to define mock.On call
//   - _a0 time.Time
func (_e *memcachedConnection_Expecter) SetReadDeadline(_a0 interface{}) *memcachedConnection_SetReadDeadline_Call {
	return &memcachedConnection_SetReadDeadline_Call{Call: _e.mock.On("SetReadDeadline", _a0)}
}

func (_c *memcachedConnection_SetReadDeadline_Call) Run(run func(_a0 time.Time)) *memcachedConnection_SetReadDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *memcachedConnection_SetReadDeadline_Call) Return(_a0 error) *memcachedConnection_SetReadDeadline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *memcachedConnection_SetReadDeadline_Call) RunAndReturn(run func(time.Time) error) *memcachedConnection_SetReadDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: p
func (_m *memcachedConnection) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// memcachedConnection_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type memcachedConnection_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - p []byte
func (_e *memcachedConnection_Expecter) Write(p interface{}) *memcachedConnection_Write_Call {
	return &memcachedConnection_Write_Call{Call: _e.mock.On("Write", p)}
}

func (_c *memcachedConnection_Write_Call) Run(run func(p []byte)) *memcachedConnection_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *memcachedConnection_Write_Call) Return(n int, err error) *memcachedConnection_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *memcachedConnection_Write_Call) RunAndReturn(run func([]byte) (int, error)) *memcachedConnection_Write_Call {
	_c.Call.Return(run)
	return _c
}

// newMemcachedConnection creates a new instance of memcachedConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMemcachedConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *memcachedConnection {
	mock := &memcachedConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
